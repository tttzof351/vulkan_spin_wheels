#version 450
#extension GL_ARB_separate_shader_objects : enable

#define M_PI 3.1415926535897932384626433832795

#define WORKGROUP_SIZE 32
layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;

struct Pixel {
    vec4 value;
};

layout(std140, binding = 0) buffer buf {
    Pixel image[];
};

layout(std140, binding = 1) buffer buf2 {
    Pixel image2[];
};

layout(binding = 2) uniform UniformBufferObject {
    float width;
    float height;
    float params;
    float alignment;
} ubo;


uint width = uint(ubo.width);
uint height = uint(ubo.height);
uint half_height = height/2;

uint window_size = 7;
uint half_window_size = window_size/2;

float W = 1.0;
float ALPHA = 0.022;
float K = 0.05;

//https://www.complexity-explorables.org/explorables/spin-wheels/
void main() {
    uint x = gl_GlobalInvocationID.x;
    uint y = gl_GlobalInvocationID.y;

    if (x > width || y > height) {
        return;
    }
    uint pos = width * y + x;

    if (ubo.alignment > 0.0) {
        vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
        float count = 0;
        float accum = 0;

        uint pos = width * y + x;
        float prevOmega = (ubo.params < 0.0) ? image[pos].value.x : image2[pos].value.x;

        for (int i = 0; i < window_size; i++) {
            for (int j = 0; j < window_size; j++) {
                uint effectX = x + i - half_window_size;
                uint effectY = y + j - half_window_size;
                if (effectX == x && effectY == y) continue;
                if (effectX < 0 || effectY < 0) continue;
                if (effectX >= width || effectY >= height) continue;

                uint pos = width * effectY + effectX;
                float mOmega = (ubo.params < 0.0) ? image[pos].value.x : image2[pos].value.x;
                accum += sin((2 * M_PI) * (prevOmega - mOmega));
            }
        }

        accum *= K;
        float deltaOmega = W + accum;
        float omega = prevOmega - ALPHA * deltaOmega;

        if (ubo.params > 0.0) {
            image[pos].value = vec4(omega, 0.0, 0.0, 1.0);
        } else {
            image2[pos].value = vec4(omega, 0.0, 0.0, 1.0);
        }
    }
}